name: Build and Test

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '.github/workflows/**'
      - 'src/**'

env:
  SRC_PATH: './src/'

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ${{ env.SRC_PATH }}

      - name: dotnet build
        if: success()
        run: dotnet build --no-restore --no-incremental
        working-directory: ${{ env.SRC_PATH }}

      - name: dotnet test
        if: success()
        run: dotnet test --nologo --no-restore --no-build --verbosity normal -p:CollectCoverage=true -p:CoverletOutputFormat=opencover
        working-directory: "${{ env.SRC_PATH }}pelazem.util.tests/"

      - name: Codecov
        if: success()
        uses: codecov/codecov-action@v3.1.4
        with:
          name: codecov-unit-tests
          directory: "${{ env.SRC_PATH }}pelazem.util.tests/"
          flags: unit-tests
          fail_ci_if_error: true
          verbose: true

  sonar:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install dotnet-coverage
        if: success()
        run: dotnet tool install --global dotnet-coverage

      - name: Make Sonar directories
        if: success()
        run: |
          mkdir -p ./.sonar/cache
          mkdir -p ./.sonar/scanner

      - name: Cache SonarCloud packages
        if: success()
        uses: actions/cache@v3
        with:
          path: ./.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        if: success()
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: success() && steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Build and analyze
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"plzm_pelazem.util" /o:"plzm" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet restore ${{ env.SRC_PATH }}
          dotnet build ${{ env.SRC_PATH }} --no-restore --no-incremental
          dotnet-coverage collect 'dotnet test ${{ env.SRC_PATH }}pelazem.util.tests/ --nologo --no-restore --no-build --verbosity normal' -f xml -o 'coverage.xml'
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
